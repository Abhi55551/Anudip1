Implement and demonstrate the use of the following in Solidity :
(I).Contracts (II).Inheritance (III).Constructors (IV).Abstract Class (V).Interfaces








(I).Contracts
// Solidity program to
// demonstrate how to
// write a smart contract
pragma solidity >= 0.4.16 < 0.7.0;


// Defining a contract contract Test
{


// Declaring state variables uint public var1;
uint public var2; uint public sum;

// Defining public function
// that sets the value of
 
// the state variable
function set(uint x, uint y) public
{
var1 = x; var2=y; sum=var1+var2;
}
// Defining function to
// print the sum of
// state variables function get(
) public view returns (uint) { return sum;
}
}



(II).Inheritance
// Solidity program to demonstrate Single Inheritance pragma solidity >=0.4.22 <0.6.0;

// Defining contract contract parent{

// Declaring internal state varaiable uint internal sum;

// Defining external function to set value of internal state variable sum function setValue() external {
uint a = 10; uint b = 20; sum = a + b;
}
}


// Defining child contract contract child is parent{

// Defining external function to return value of internal state variable sum function getValue() external view returns(uint) {
return sum;
}
}
// Defining calling contract
 
contract caller {


// Creating child contract object child cc = new child();

// Defining function to call setValue and getValue functions function testInheritance() public {
cc.setValue();
}
function result() public view returns(uint ){ return cc.getValue();
}
}


(III).Constructors
// Solidity program to demonstrate
// creating a constructor pragma solidity ^0.5.0;

// Creating a contract
contract constructorExample {


// Declaring state variable string str;

// Creating a constructor
// to set value of 'str' constructor() public { str = "GeeksForGeeks";
}


// Defining function to
// return the value of 'str' function getValue(
) public view returns ( string memory) { return str;
}
}

